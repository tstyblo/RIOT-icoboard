/*
 * Copyright (C) 2020 Tomas Styblo
 *
 * This file is subject to the terms and conditions of the GNU Lesser
 * General Public License v2.1. See the file LICENSE in the top level
 * directory for more details.
 */

/**
 * @defgroup    boards_icosoc icoBoard with icoSoC and picorv32 core
 * @ingroup     boards_icosoc
 * @brief       Support for icoBoard with icoSoC and picorv32 core
 * @author      Tomas Styblo <tstyblo@gmail.com>

### Overview

Only flash memory programming is supported when using the standard build targets.

First, you will have to patch the icosoc.py file used by icosoc to create the icosoc.v Verilog file. 

The patch adds a new progaddr_irq option that allow us to use our own IRQ vector.

The patch is in boards/icosoc/dist/icosoc-icosoc_py-progaddr_irq.patch.

You should also apply the icosoc-firmware_c-flash_prog_max_size.patch to firmware.c
in order to prevent code from being truncated at 128 KB when it is loaded from the FLASH memory.

Then follow the instructions in the icosoc documentation to install the riscv-gnu-toolchain.

Add the appropriate directory (eg. /opt/riscv32ic/bin) to your PATH.

Then you can create icosoc.bin by compiling the "hello" example in the icosoc distribution.

You will have to add the following to icosoc.cfg before starting:

--------------------------------------
# custom interrupt vector address
progaddr_irq 32'h0001_0080
--------------------------------------

When the compilation is finished you must program icosoc.bin into the flash memory:

# icoprog -f < icosoc.bin

This is needed only the first time.

Then you can use the following to compile and load the example apps into the flash memory and to run them:

# export BOARD=icosoc
# make flash
# make reset
# make term

You can test it with one of the examples and tests that already work,
eg. "examples/filesystem" ("ps", "help", "cat /const/hello-world", "format", "mount", "vfs df", 
"tee /sda/x.txt Hello", "ls /sda", ...), or "tests/thread_msg", "tests/thread_cooperation".

*/
